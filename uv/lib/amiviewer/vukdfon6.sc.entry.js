/*! Built with http://stenciljs.com */
const{h:e}=window.amiviewer,t={red:16711680,blue:255,background:0},i=e=>new Promise((t,i)=>{const s=new XMLHttpRequest;s.open("GET",e,!0),s.onload=(()=>{let e=JSON.parse(s.responseText);e=((e,t)=>t.map(t=>(e.endsWith("/")||(e+="/"),`${e}${t}`)))(e.baseurl,e.series),t(e)}),s.onerror=(()=>{i()}),s.send()});class s{watchHandler(){this.reset()}componentDidLoad(){this.reset()}reset(){console.log("setting up ami-mesh-viewer"),this._createRenderer(),this._scene=new THREE.Scene,this._scene.add(new THREE.AmbientLight(15066597));const e=new THREE.DirectionalLight(16777215,1);e.position.set(1,1,1).normalize(),this._scene.add(e),this._createCamera(),this._createControls(),this._animate(),i(this.series).then(e=>{(new THREE.STLLoader).load(e[0],e=>{const t=new THREE.MeshPhongMaterial({color:16007990,specular:1118481,shininess:200}),i=new THREE.Mesh(e,t),s=new THREE.Matrix4;s.set(-1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1),i.applyMatrix(s),this._scene.add(i),this.onViewerLoaded.emit({stackHelper:i})})})}_createRenderer(){this._renderer=new THREE.WebGLRenderer({alpha:!0}),this._renderer.setSize(this._container.offsetWidth,this._container.offsetHeight),this._renderer.setClearColor(t.background,1),this._renderer.setPixelRatio(window.devicePixelRatio),this._container.appendChild(this._renderer.domElement),this._renderer.domElement.addEventListener("wheel",this._onWheel.bind(this))}_onWheel(){}_createCamera(){this._camera=new THREE.PerspectiveCamera(45,this._container.offsetWidth/this._container.offsetHeight,.1,999999),this._camera.position.x=150,this._camera.position.y=150,this._camera.position.z=100}_createControls(){this._controls=new AMI.TrackballControl(this._camera,this._container),this._controls.addEventListener("change",this._onControlsChange.bind(this)),this._controls.addEventListener("start",this._onControlsStart.bind(this)),this._controls.addEventListener("end",this._onControlsEnd.bind(this))}_onControlsChange(){}_onControlsStart(){}_onControlsEnd(){}_animate(){this._controls.update(),this._render3D(),requestAnimationFrame(()=>{this._animate()})}_render3D(){this._renderer.render(this._scene,this._camera)}resize(){this._camera.aspect=this._container.offsetWidth/this._container.offsetHeight,this._camera.updateProjectionMatrix(),this._renderer.setSize(this._container.offsetWidth,this._container.offsetHeight)}render(){return e("div",{id:"container",ref:e=>this._container=e})}static get is(){return"ami-mesh-viewer"}static get encapsulation(){return"shadow"}static get properties(){return{reset:{method:!0},resize:{method:!0},series:{type:String,attr:"series",watchCallbacks:["watchHandler"]}}}static get events(){return[{name:"onViewerLoaded",method:"onViewerLoaded",bubbles:!0,cancelable:!0,composed:!0}]}static get style(){return"#container.sc-ami-mesh-viewer{background-color:#000;left:0;right:0;top:0;bottom:0;position:absolute;width:100%;height:100%;overflow:hidden}"}}class r{watchHandler(){this.reset()}componentDidLoad(){this.reset()}reset(){console.log("setting up ami-slices-viewer"),this._createRenderer(),this._scene=new THREE.Scene,this._createCamera(),this._createControls(),i(this.series).then(e=>{const i=new AMI.VolumeLoader(this._container);i.load(e).then(()=>{const e=i.data[0].mergeSeries(i.data)[0].stack[0];i.free(),this._stackHelper=new AMI.StackHelper(e),this._stackHelper.bbox.color=t.red,this._stackHelper.border.color=t.blue,this._scene.add(this._stackHelper),this.onViewerLoaded.emit({stackHelper:this._stackHelper});const s=this._stackHelper.stack.worldCenter();this._camera.lookAt(s.x,s.y,s.z),this._camera.updateProjectionMatrix(),this._controls.target.set(s.x,s.y,s.z)}).catch(e=>{console.log("DICOM load error"),console.error(e)}),this._animate()})}_createRenderer(){this._renderer=new THREE.WebGLRenderer({antialias:!0}),this._renderer.setSize(this._container.offsetWidth,this._container.offsetHeight),this._renderer.setClearColor(t.background,1),this._renderer.setPixelRatio(window.devicePixelRatio),this._container.appendChild(this._renderer.domElement),this._renderer.domElement.addEventListener("wheel",this._onWheel.bind(this))}_onWheel(){}_createCamera(){this._camera=new THREE.PerspectiveCamera(45,this._container.offsetWidth/this._container.offsetHeight,.1,999999),this._camera.position.x=150,this._camera.position.y=150,this._camera.position.z=100}_createControls(){this._controls=new AMI.TrackballControl(this._camera,this._container)}_animate(){this._controls.update(),this._render3D(),requestAnimationFrame(()=>{this._animate()})}_render3D(){this._renderer.render(this._scene,this._camera)}resize(){this._camera.aspect=this._container.offsetWidth/this._container.offsetHeight,this._camera.updateProjectionMatrix(),this._renderer.setSize(this._container.offsetWidth,this._container.offsetHeight)}render(){return e("div",{id:"container",ref:e=>this._container=e})}static get is(){return"ami-slices-viewer"}static get encapsulation(){return"shadow"}static get properties(){return{reset:{method:!0},resize:{method:!0},series:{type:String,attr:"series",watchCallbacks:["watchHandler"]}}}static get events(){return[{name:"onViewerLoaded",method:"onViewerLoaded",bubbles:!0,cancelable:!0,composed:!0}]}static get style(){return"#container.sc-ami-slices-viewer{background-color:#000;left:0;right:0;top:0;bottom:0;position:absolute;width:100%;height:100%;overflow:hidden}"}}var n;!function(e){e.SLICES="slices",e.VOLUME="volume",e.MESH="mesh"}(n||(n={}));class a{constructor(){this.mode=n.SLICES}watchSeries(){this.reset()}watchMode(){this.reset()}componentDidLoad(){this.reset()}reset(){console.log("setting up ami-viewer"),window.addEventListener("resize",()=>{this.resize()},!1)}resize(){this._viewer.resize()}_renderViewer(){switch(this.mode){case n.SLICES:return e("ami-slices-viewer",{ref:e=>this._viewer=e,series:this.series});case n.VOLUME:return e("ami-volume-viewer",{ref:e=>this._viewer=e,series:this.series});case n.MESH:return e("ami-mesh-viewer",{ref:e=>this._viewer=e,series:this.series})}}render(){return console.log("render"),this._renderViewer()}loaded(e){const t=e.detail;switch(this.mode){case n.SLICES:this.onSlicesLoaded.emit(t);break;case n.VOLUME:this.onVolumeLoaded.emit(t);break;case n.MESH:this.onMeshLoaded.emit()}}static get is(){return"ami-viewer"}static get encapsulation(){return"shadow"}static get properties(){return{mode:{type:String,attr:"mode",watchCallbacks:["watchMode"]},reset:{method:!0},resize:{method:!0},series:{type:String,attr:"series",watchCallbacks:["watchSeries"]}}}static get events(){return[{name:"onSlicesLoaded",method:"onSlicesLoaded",bubbles:!0,cancelable:!0,composed:!0},{name:"onVolumeLoaded",method:"onVolumeLoaded",bubbles:!0,cancelable:!0,composed:!0},{name:"onMeshLoaded",method:"onMeshLoaded",bubbles:!0,cancelable:!0,composed:!0}]}static get listeners(){return[{name:"onViewerLoaded",method:"loaded"}]}static get style(){return""}}class o{constructor(){this._ready=!1,this._modified=!1}watchHandler(){this.reset()}componentDidLoad(){this.reset()}reset(){console.log("setting up ami-volume-viewer"),this._createRenderer(),this._scene=new THREE.Scene,this._createCamera(),this._createControls(),this._animate(),i(this.series).then(e=>{let t=new AMI.VolumeLoader(this._container);t.load(e).then(()=>{const e=t.data[0].mergeSeries(t.data)[0].stack[0];t.free(),this._stackHelper=new AMI.VolumeRenderingHelper(e),this._scene.add(this._stackHelper),this._lut=new AMI.LutHelper(this._lutCanvases),this._lut.luts=AMI.LutHelper.presetLuts(),this._lut.lutsO=AMI.LutHelper.presetLutsO(),this._stackHelper.uniforms.uTextureLUT.value=this._lut.texture,this._stackHelper.uniforms.uLut.value=1;let i=e.worldCenter();this._camera.lookAt(i.x,i.y,i.z),this._camera.updateProjectionMatrix(),this._controls.target.set(i.x,i.y,i.z),this.onViewerLoaded.emit({stackHelper:this._stackHelper,lut:this._lut,modifiedCallback:()=>{this._modified=!0}}),this._ready=!0,this._modified=!0,this._render3D()}).catch(e=>window.console.log(e))})}_createRenderer(){this._renderer=new THREE.WebGLRenderer({alpha:!0}),this._renderer.setSize(this._container.offsetWidth,this._container.offsetHeight),this._renderer.setClearColor(t.background,1),this._renderer.setPixelRatio(window.devicePixelRatio),this._container.appendChild(this._renderer.domElement),this._renderer.domElement.addEventListener("wheel",this._onWheel.bind(this))}_onWheel(){this._wheel||(this._renderer.setPixelRatio(.1*window.devicePixelRatio),this._renderer.setSize(this._container.offsetWidth,this._container.offsetHeight),this._wheel=Date.now()),Date.now()-this._wheel<300&&(clearTimeout(this._wheelTO),this._wheelTO=setTimeout(()=>{this._renderer.setPixelRatio(.5*window.devicePixelRatio),this._renderer.setSize(this._container.offsetWidth,this._container.offsetHeight),this._modified=!0,setTimeout(()=>{this._renderer.setPixelRatio(window.devicePixelRatio),this._renderer.setSize(this._container.offsetWidth,this._container.offsetHeight),this._wheel=null,this._modified=!0},100)},300)),this._modified=!0}_createCamera(){this._camera=new THREE.PerspectiveCamera(45,this._container.offsetWidth/this._container.offsetHeight,.1,1e5),this._camera.position.x=166,this._camera.position.y=-471,this._camera.position.z=153,this._camera.up.set(-.42,.86,.26)}_createControls(){this._controls=new AMI.TrackballControl(this._camera,this._container),this._controls.rotateSpeed=5.5,this._controls.zoomSpeed=1.2,this._controls.panSpeed=.8,this._controls.staticMoving=!0,this._controls.dynamicDampingFactor=.3,this._controls.addEventListener("change",this._onControlsChange.bind(this)),this._controls.addEventListener("start",this._onControlsStart.bind(this)),this._controls.addEventListener("end",this._onControlsEnd.bind(this))}_onControlsChange(){this._modified=!0}_onControlsStart(){this._stackHelper&&this._stackHelper.uniforms&&!this._wheel&&(this._renderer.setPixelRatio(.1*window.devicePixelRatio),this._renderer.setSize(this._container.offsetWidth,this._container.offsetHeight),this._modified=!0)}_onControlsEnd(){this._stackHelper&&this._stackHelper.uniforms&&!this._wheel&&(this._renderer.setPixelRatio(.5*window.devicePixelRatio),this._renderer.setSize(this._container.offsetWidth,this._container.offsetHeight),this._modified=!0,setTimeout(()=>{this._renderer.setPixelRatio(window.devicePixelRatio),this._renderer.setSize(this._container.offsetWidth,this._container.offsetHeight),this._modified=!0},100))}_animate(){this._controls.update(),this._render3D(),requestAnimationFrame(()=>{this._animate()})}_render3D(){this._ready&&this._modified&&(this._renderer.render(this._scene,this._camera),this._modified=!1)}resize(){this._camera.aspect=this._container.offsetWidth/this._container.offsetHeight,this._camera.updateProjectionMatrix(),this._renderer.setSize(this._container.offsetWidth,this._container.offsetHeight),this._modified=!0}render(){return e("div",null,e("div",{id:"my-lut-container"},e("div",{id:"my-lut-min"},"0.0"),e("div",{id:"my-lut-canvases",ref:e=>this._lutCanvases=e}),e("div",{id:"my-lut-max"},"1.0")),e("div",{id:"container",ref:e=>this._container=e}))}static get is(){return"ami-volume-viewer"}static get encapsulation(){return"shadow"}static get properties(){return{reset:{method:!0},resize:{method:!0},series:{type:String,attr:"series",watchCallbacks:["watchHandler"]}}}static get events(){return[{name:"onViewerLoaded",method:"onViewerLoaded",bubbles:!0,cancelable:!0,composed:!0}]}static get style(){return"#container.sc-ami-volume-viewer{background-color:#000;left:0;right:0;top:0;bottom:0;position:absolute;width:100%;height:100%;overflow:hidden}"}}export{s as AmiMeshViewer,r as AmiSlicesViewer,a as AmiViewer,o as AmiVolumeViewer};